import numpy as np
import pandas as pd
import pathlib
from typing import Union, Tuple
import re

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        if isinstance(data_fname, str):
            self.data_fname = pathlib.Path(data_fname)
        else:
            self.data_fname = data_fname
            
        if not self.data_fname.exists():
                self.data = None
                raise ValueError("The file does not exist.")
        self.data = None

    def read_data(self):
        """Reads the JSON data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)
        

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        bins = np.arange(0, 101, 10)
        print(self.data.shape)
        age_df = self.data['age'].dropna()
        print(age_df.shape)
        bin_count_list = []
        for index in range(len(bins) - 1):
            current_bin_count = age_df[(age_df >= bins[index]) & (age_df < bins[index + 1])].count()
            bin_count_list.append(current_bin_count)
        current_bin_count = age_df[(age_df >= bins[-2]) & (age_df <= bins[-1])].count()
        bin_count_list.append(current_bin_count)
        hist = np.array(bin_count_list)

        return hist, bins

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

    Returns
    -------
    df : pd.DataFrame
    A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
    the (ordinal) index after a reset.
        """
        email_pattern = r'^[a-zA-Z0-9]+@[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+$'

        df = self.data
        valid_emails_df = df[df['email'].str.contains(email_pattern, regex=True)]
        valid_emails_df.reset_index(drop=True, inplace=True)

        return valid_emails_df
    
    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:

        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

    Returns
    -------
    df : pd.DataFrame
    The corrected DataFrame after insertion of the mean grade
    arr : np.ndarray
        Row indices of the students that their new grades were generated
        """

        original_df = self.data
        questions_df = original_df[['q1', 'q2', 'q3', 'q4', 'q5']]
        nan_rows = questions_df[questions_df.isna().any(axis=1)]
        arr = np.array(nan_rows.index)
        nan_rows['mean'] = nan_rows.mean(axis=1)
        nan_rows = nan_rows.apply(lambda row: row.fillna(row.mean()), axis=1)
        original_df.update(nan_rows)

        return original_df, arr

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        original_df = self.data
        questions_df = original_df[['q1', 'q2', 'q3', 'q4', 'q5']]
        nan_rows = questions_df[questions_df.isna().sum(axis=1) > maximal_nans_per_sub]
        nan_rows['score'] = np.nan
        good_rows = questions_df[questions_df.isna().sum(axis=1) <= maximal_nans_per_sub]
        good_rows['score'] = good_rows.mean(axis=1)
        combined_df = pd.concat([nan_rows, good_rows])
        original_df['score'] = np.floor(combined_df['score'])
        original_df['score'] = original_df['score'].clip(0, 255).astype(pd.UInt8Dtype())
        
        return original_df
    




data_file = 'data.json'
analysis = QuestionnaireAnalysis(data_file)
analysis.read_data()
analysis.remove_rows_without_mail()
print(analysis.score_subjects()['score'])


